@model FilmZone.ViewModels.MovieDetailsViewModel

@{
    ViewData["Title"] = Model.Title;
    var userId = User.Identity.IsAuthenticated ? User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value : null;
}

<div class="card text-white bg-dark mb-3 rounded-4 mt-5 overflow-hidden shadow-lg">
    <div class="card-body ms-3 p-0">
        <div class="row g-0">
            <div class="col-md-8 p-4">
                <div>
                    <!-- Title and Rating Section -->
                    <div class="d-flex align-items-start mt-2 mb-3">
                        <div class="flex-grow-1">
                            <h1 class="text-primary fw-bolder mb-2">@Model.Title</h1>
                            
                            @if (User.Identity.IsAuthenticated)
                            {
                                <!-- Current Rating Display -->
                                <div class="mb-3">
                                    <small class="text-muted d-block mb-1">Current Rating</small>
                                    <div class="text-warning fs-4">
                                       @{
    double rating = Model.Rating ?? 0;
    int fullStars = (int)Math.Floor(rating);
    bool hasHalfStar = (rating - fullStars) >= 0.25 && (rating - fullStars) < 0.75;
    int emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
}
<div class="text-warning fs-4">
    @for (int i = 0; i < fullStars; i++)
    {
        <i class="bi bi-star-fill"></i>
    }

    @if (hasHalfStar)
    {
        <i class="bi bi-star-half"></i> <!-- Use bi-star-half (not bi-star-half-fill) -->
    }

    @for (int i = 0; i < emptyStars; i++)
    {
        <i class="bi bi-star"></i>
    }

    <span class="ms-2 fs-6 text-light">(@rating.ToString("F1")/5)</span>
</div>

                                        @if (Model.Rating is not null)
                                        {
                                            <span class="ms-2 fs-6 text-light">(@string.Format("{0:F1}", Model.Rating)/5)</span>
                                        }
                                        else
                                        {
                                            <span class="ms-2 fs-6 text-muted">(No ratings yet)</span>
                                        }
                                    </div>
                                </div>
                                
                                <!-- User Rating Form -->
                                <div class="mb-3">
                                    <small class="text-muted d-block mb-1">
                                        @if (Model.MyRating.HasValue)
                                        {
                                            <span>Your rating: @string.Format("{0:F1}", Model.MyRating.Value)/5 - Click to change</span>
                                        }
                                        else
                                        {
                                            <span>Rate this movie</span>
                                        }
                                    </small>
                                    <form id="ratingForm" method="post" asp-action="AddRating" asp-controller="Movies" class="mb-0">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="MovieId" value="@Model.Id" />
                                        <input type="hidden" name="UserId" value="@userId" />
                                        <input type="hidden" name="Rating" id="ratingInput" />
                                        <div class="text-warning fs-5" id="rating-stars" data-user-rating="@(Model.MyRating?.ToString() ?? "0")">
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                <i class="bi bi-star rating-star" data-value="@i"></i>
                                            }
                                        </div>
                                    </form>
                                </div>
                            }
                            else
                            {
                                <!-- Static Stars for Guests -->
                                <div class="mb-3">
                                    <small class="text-muted d-block mb-1">Rating</small>
                                    <div class="text-warning fs-4">
@{
    double rating = Model.Rating ?? 0;
    int fullStars = (int)Math.Floor(rating);
    bool hasHalfStar = (rating - fullStars) >= 0.25 && (rating - fullStars) < 0.75;
    int emptyStars = 5 - fullStars - (hasHalfStar ? 1 : 0);
}
<div class="text-warning fs-4">
    @for (int i = 0; i < fullStars; i++)
    {
        <i class="bi bi-star-fill"></i>
    }

    @if (hasHalfStar)
    {
        <i class="bi bi-star-half"></i> <!-- Use bi-star-half (not bi-star-half-fill) -->
    }

    @for (int i = 0; i < emptyStars; i++)
    {
        <i class="bi bi-star"></i>
    }

    <span class="ms-2 fs-6 text-light">(@rating.ToString("F1")/5)</span>
</div>


                                        @if (Model.Rating is not null)
                                        {
                                            <span class="ms-2 fs-6 text-light">(@string.Format("{0:F1}", Model.Rating)/5)</span>
                                        }
                                        else
                                        {
                                            <span class="ms-2 fs-6 text-muted">(No ratings yet)</span>
                                        }
                                    </div>
                                    <div class="mt-2">
                                        <a asp-action="SignIn" asp-controller="Account" class="btn btn-outline-primary btn-sm">
                                            <i class="bi bi-person-plus me-1"></i>Join to Rate
                                        </a>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <!-- Category Badge -->
                    <div class="mb-3">
                        <a asp-action="Index" asp-controller="Home" asp-route-id="@Model.CategoryId"
                           class="badge rounded-pill bg-primary-subtle fs-6 text-primary text-decoration-none category-badge">
                            <i class="bi bi-tag me-1"></i>@Model.Category
                        </a>
                    </div>

                    <!-- Description -->
                    <div class="mb-4">
                        <h5 class="text-light mb-2">Synopsis</h5>
                        <p class="fs-6 text-light-emphasis lh-lg">@Model.Description</p>
                    </div>

                    <!-- Streaming Services -->
                    <div class="mb-3">
                        <h6 class="text-muted mb-2">
                            <i class="bi bi-play-circle me-1"></i>Available On:
                        </h6>
                        <div class="d-flex flex-wrap gap-2">
                            @foreach (var StreamLogo in Model.StreamingLogos)
                            {
                                <div class="streaming-service" title="Available on @StreamLogo">
                                    <img src="@Url.Content($"~/assets/images/Logos/{StreamLogo}.png")"
                                         alt="@StreamLogo"
                                         class="stream-logo" />
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Movie Poster -->
            <div class="col-md-4 position-relative">
                <div class="poster-container">
                    <img alt="@Model.Title" 
                         class="w-100 h-100 object-fit-cover" 
                         src="@Url.Content($"~/assets/images/Movies/{Model.Cover}")" 
                         loading="lazy" />
                    <div class="poster-overlay"></div>
                </div>
            </div>
        </div>
    </div>
</div>

@if (User.IsInRole("Admin"))
{
    <div class="admin-actions mb-4 text-center">
        <a class="btn btn-outline-warning me-3" asp-action="Edit" asp-route-id="@Model.Id">
            <i class="bi bi-pencil-fill me-1"></i>Edit Movie
        </a>
        <a class="btn btn-outline-danger" asp-action="Delete" asp-route-id="@Model.Id" 
           onclick="return confirm('Are you sure you want to delete this movie?')">
            <i class="bi bi-trash-fill me-1"></i>Delete
        </a>
    </div>
}

<!-- Enhanced JavaScript for Rating -->
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const stars = document.querySelectorAll("#rating-stars .rating-star");
        const form = document.getElementById("ratingForm");
        const input = document.getElementById("ratingInput");
        const ratingContainer = document.getElementById("rating-stars");
        
        if (stars.length === 0 || !form || !input) return;

        const userRating = parseInt(ratingContainer.getAttribute("data-user-rating")) || 0;
        let currentRating = userRating;

        // Initialize display with user's existing rating
        highlightStars(currentRating);

        stars.forEach((star, index) => {
            star.addEventListener("mouseenter", () => {
                highlightStars(index + 1);
            });

            star.addEventListener("mouseleave", () => {
                highlightStars(currentRating);
            });

            star.addEventListener("click", () => {
                const rating = index + 1;
                currentRating = rating;
                input.value = rating;
                highlightStars(rating);
                
                // Add visual feedback
                star.style.transform = "scale(1.2)";
                setTimeout(() => {
                    star.style.transform = "scale(1)";
                }, 150);
                
                // Submit after short delay for better UX
                setTimeout(() => {
                    form.submit();
                }, 300);
            });
        });

        function highlightStars(count) {
            stars.forEach((star, index) => {
                if (index < count) {
                    star.className = "bi bi-star-fill rating-star text-warning";
                } else {
                    star.className = "bi bi-star rating-star text-warning";
                }
            });
        }
    });
</script>

<style>
    /* Enhanced Styling */
    .shadow-lg {
        box-shadow: 0 1rem 3rem rgba(0, 0, 0, 0.3) !important;
    }

    .rating-star {
        cursor: pointer;
        transition: all 0.2s ease;
        margin: 0 2px;
    }

    .rating-star:hover {
        transform: scale(1.1);
        filter: brightness(1.2);
    }

    .stream-logo {
        width: 50px;
        height: 45px;
        border-radius: 12px;
        transition: all 0.3s ease;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
    }

    .streaming-service:hover .stream-logo {
        transform: translateY(-2px) scale(1.05);
        box-shadow: 0 4px 15px rgba(13, 110, 253, 0.4);
    }

    .category-badge {
        transition: all 0.3s ease;
        border: 1px solid transparent;
    }

    .category-badge:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(13, 110, 253, 0.3);
        border-color: #0d6efd;
    }

    .poster-container {
        position: relative;
        height: 100%;
        min-height: 400px;
        overflow: hidden;
        border-radius: 0 1rem 1rem 0;
    }

    .poster-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(135deg, transparent 0%, rgba(0, 0, 0, 0.2) 100%);
        pointer-events: none;
    }

    .admin-actions {
        animation: slideInUp 0.5s ease;
    }

    @@keyframes slideInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    /* Responsive improvements */
    @@media (max-width: 768px) {
        .card-body {
            padding: 1.5rem !important;
        }
        
        .poster-container {
            min-height: 300px;
            border-radius: 0 0 1rem 1rem;
        }
        
        .stream-logo {
            width: 40px;
            height: 36px;
        }
    }
</style>